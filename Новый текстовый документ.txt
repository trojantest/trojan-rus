#include <Windows.h>

int ScreenWidth, ScreenHeight;
//скорость 1 
int Interval = 0;
//скорость 1 
LRESULT CALLBACK Melter(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
{
    switch (Msg)
    {
    case WM_CREATE:
    {
        HDC Desktop = GetDC(HWND_DESKTOP);
        HDC Window = GetDC(hWnd);

        BitBlt(Window, 0, 0, ScreenWidth, ScreenHeight, Desktop, 0, 0, SRCCOPY);
        ReleaseDC(hWnd, Window);
        ReleaseDC(HWND_DESKTOP, Desktop);

        SetTimer(hWnd, 0, Interval, 0);
        ShowWindow(hWnd, SW_SHOW);
        break;
    }
    case WM_PAINT:
    {
        ValidateRect(hWnd, 0);
        break;
    }
    case WM_TIMER:
    {
        HDC Window = GetDC(hWnd);
        //размер члена:3
        int X = (rand() % ScreenWidth) - (150 / 2),
            Y = (rand() % 15),
            //размер члена:3
            
            //скорость 2 
            Width = (rand() % 1550);
        //скорость 2
        BitBlt(Window, X, Y, Width, ScreenHeight, Window, X, 0, SRCCOPY);
        ReleaseDC(hWnd, Window);
        break;
    }
    case WM_DESTROY:
    {
        //сам хз
        KillTimer(hWnd, 0);
        PostQuitMessage(0);
        break;
        //сам хз
    }
    return 0;
    }
    return DefWindowProc(hWnd, Msg, wParam, lParam);
}

int APIENTRY WinMain(HINSTANCE Inst, HINSTANCE Prev, LPSTR Cmd, int showcmd)
{
    // Получите ширину и высоту текущего экрана
    ScreenWidth = GetSystemMetrics(SM_CXSCREEN);
    ScreenHeight = GetSystemMetrics(SM_CYSCREEN);

    WNDCLASS wndClass = { 0, Melter, 0,0, Inst, 0, LoadCursorW(0, IDC_ARROW), 0, 0, L"ScreenMelter" };

    if (RegisterClass(&wndClass))
    {
        // Создайте перекрывающееся окно "melter".
        HWND hWnd = CreateWindowExA(WS_EX_TOPMOST, "ScreenMelter", 0, WS_POPUP,
            0, 0, ScreenWidth, ScreenHeight, HWND_DESKTOP, 0, Inst, 0);
        if (hWnd)
        {
            // исходное значение для рандомизации
            srand(GetTickCount());
            MSG Msg = { 0 };
            // запустите цикл плавления
            while (Msg.message != WM_QUIT)
            {
                if (PeekMessage(&Msg, 0, 0, 0, PM_REMOVE))
                {
                    TranslateMessage(&Msg);
                    DispatchMessage(&Msg);
                }
            }
        }
    }
    return 0;
}